syntax = "proto2";

import "message-parts.proto";

package blockchain.proto.protobuf;
option java_package = "io.scalechain.blockchain.proto.protobuf";
option optimize_for = SPEED;


message Version {
    required int32 version = 1;
    required int64 services = 2;
    required int64 timestamp = 3;
    required NetworkAddress destAddress = 4;
    required NetworkAddress sourceAddress = 5;
    required int64 nonce = 6;
    required string userAgent = 7;
    required int64 startHeight = 8;
    required bool relay = 9;
}


message Verack {
    optional int32 dummy = 1;
}


message Addr {
    repeated NetworkAddressWithTimestamp addresses = 1;
}



message InvVector {
    enum InvType {
        ERROR = 0;
        MSG_TX = 1;
        MSG_BLOCK = 2;
        MSG_FILTERED_BLOCK = 3;
    }

    required InvType invType = 1;
    required Hash hash = 2;
}

message Inv {
    repeated InvVector inventories = 1;
}

message GetData {
    repeated InvVector inventories = 1;
}



message NotFound {
    repeated InvVector inventories = 1;
}


message GetBlocks {
    required int64 version = 1;
    repeated Hash blockLocatorHashes = 2;
    required Hash hashStop = 3;
}

message GetHeaders {
    required int64 version = 1;
    repeated Hash blockLocatorHashes = 2;
    required Hash hashStop = 3;
}


message Headers {
    repeated BlockHeader headers = 1;
}



message GetAddr {
    optional int32 dummy = 1;
}



message Mempool {
    optional int32 dummy = 1;
}

message Ping {
    required int64 nonce = 1;
}

message Pong {
    required int64 nonce = 1;
}



message Reject {
    enum RejectType {
        REJECT_MALFORMED       = 1;
        REJECT_INVALID         = 16; // 0x10
        REJECT_OBSOLETE        = 17; // 0x11
        REJECT_DUPLICATE       = 18; // 0x12
        REJECT_NONSTANDARD     = 64; // 0x40
        REJECT_DUST            = 65; // 0x41
        REJECT_INSUFFICIENTFEE = 66; // 0x42
        REJECT_CHECKPOINT      = 67; // 0x43
    }
    required string     message    = 1;
    required RejectType rejectType = 2;
    required string     reason     = 3;
    required ByteArray  data       = 4;
}


// TODO : Implement.
message FilterLoad {
    optional int32 dummy = 1;
}

// TODO : Implement.
message FilterAdd {
    optional int32 dummy = 1;
}

// TODO : Implement.
message FilterClear {
    optional int32 dummy = 1;
}

// TODO : Implement.
message MerkleBlock {
    optional int32 dummy = 1;
}


// TODO : Implement.
message Alert {
    optional int32 dummy = 1;
}

message SendHeaders {
    optional int32 dummy = 1;
}
